<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\keil_output\iflash_nxp_lpcxpresso_1769\webserver_freertos_iflash_nxp_lpcxpresso_1769.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\keil_output\iflash_nxp_lpcxpresso_1769\webserver_freertos_iflash_nxp_lpcxpresso_1769.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Thu Apr 26 22:07:34 2018
<BR><P>
<H3>Maximum Stack Usage =        648 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a5]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[10]">UnHandled_Vector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UnHandled_Vector</a><BR>
 <LI><a href="#[2b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC_IRQHandler</a><BR>
 <LI><a href="#[105]">assert_loop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">assert_loop</a><BR>
 <LI><a href="#[10a]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10a]">netconn_drain</a><BR>
 <LI><a href="#[82]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[2c]">BOD_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[37]">CANActivity_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[2e]">CAN_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[9]">Chip_I2C_EventHandler</a> from i2c_17xx_40xx.o(i.Chip_I2C_EventHandler) referenced 6 times from i2c_17xx_40xx.o(.data)
 <LI><a href="#[9]">Chip_I2C_EventHandler</a> from i2c_17xx_40xx.o(i.Chip_I2C_EventHandler) referenced from board.o(i.i2c_set_mode)
 <LI><a href="#[48]">Chip_I2C_EventHandlerPolling</a> from i2c_17xx_40xx.o(i.Chip_I2C_EventHandlerPolling) referenced from board.o(i.i2c_set_mode)
 <LI><a href="#[2f]">DMA_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[27]">EINT0_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[28]">EINT1_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[29]">EINT2_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[2a]">EINT3_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[31]">ETH_IRQHandler</a> from lpc17xx_40xx_emac.o(i.ETH_IRQHandler) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[1f]">I2C0_IRQHandler</a> from board.o(i.I2C0_IRQHandler) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[20]">I2C1_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[21]">I2C2_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[30]">I2S_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[33]">MCPWM_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[25]">PLL0_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[35]">PLL1_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[1e]">PWM1_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from port.o(.emb_text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[34]">QEI_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[32]">RIT_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[26]">RTC_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[22]">SPI_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[23]">SSP0_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[24]">SSP1_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from port.o(.emb_text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[38]">SystemInit</a> from sysinit.o(i.SystemInit) referenced from keil_startup_lpc17xx_40xx.o(.text)
 <LI><a href="#[16]">TIMER0_IRQHandler</a> from board.o(i.TIMER0_IRQHandler) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[17]">TIMER1_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[18]">TIMER2_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[19]">TIMER3_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[1a]">UART0_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[1b]">UART1_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[1c]">UART2_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[1d]">UART3_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[36]">USBActivity_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[2d]">USB_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[10]">UnHandled_Vector</a> from keil_startup_lpc17xx_40xx.o(.text) referenced 4 times from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[15]">WDT_IRQHandler</a> from keil_startup_lpc17xx_40xx.o(.text) referenced from keil_startup_lpc17xx_40xx.o(RESET)
 <LI><a href="#[6b]">__main</a> from __main.o(!!!main) referenced from keil_startup_lpc17xx_40xx.o(.text)
 <LI><a href="#[40]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3b]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3d]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[3a]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[46]">accept_function</a> from api_msg.o(i.accept_function) referenced from api_msg.o(i.do_listen)
 <LI><a href="#[41]">arp_timer</a> from timers.o(i.arp_timer) referenced from timers.o(i.arp_timer)
 <LI><a href="#[41]">arp_timer</a> from timers.o(i.arp_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[53]">do_bind</a> from api_msg.o(i.do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[54]">do_close</a> from api_msg.o(i.do_close) referenced from api_lib.o(i.netconn_close_shutdown)
 <LI><a href="#[55]">do_connect</a> from api_msg.o(i.do_connect) referenced from api_lib.o(i.netconn_connect)
 <LI><a href="#[45]">do_connected</a> from api_msg.o(i.do_connected) referenced from api_msg.o(i.do_connect)
 <LI><a href="#[56]">do_delconn</a> from api_msg.o(i.do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[57]">do_listen</a> from api_msg.o(i.do_listen) referenced from api_lib.o(i.netconn_listen_with_backlog)
 <LI><a href="#[58]">do_newconn</a> from api_msg.o(i.do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[59]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[5a]">do_write</a> from api_msg.o(i.do_write) referenced from api_lib.o(i.netconn_write_partly)
 <LI><a href="#[44]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[44]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[3c]">fputc</a> from board.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[47]">http_server_netconn_thread</a> from netconn_fs.o(i.http_server_netconn_thread) referenced from netconn_fs.o(i.http_server_netconn_init)
 <LI><a href="#[4a]">ip_reass_timer</a> from timers.o(i.ip_reass_timer) referenced from timers.o(i.ip_reass_timer)
 <LI><a href="#[4a]">ip_reass_timer</a> from timers.o(i.ip_reass_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[49]">ipfrag_free_pbuf_custom</a> from ip_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip_frag.o(i.ip_frag)
 <LI><a href="#[3e]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[67]">lpc_enetif_init</a> from lpc17xx_40xx_emac.o(i.lpc_enetif_init) referenced from webserver_freertos.o(i.vSetupIFTask)
 <LI><a href="#[4c]">lpc_etharp_output</a> from lpc17xx_40xx_emac.o(i.lpc_etharp_output) referenced from lpc17xx_40xx_emac.o(i.lpc_enetif_init)
 <LI><a href="#[4d]">lpc_low_level_output</a> from lpc17xx_40xx_emac.o(i.lpc_low_level_output) referenced from lpc17xx_40xx_emac.o(i.lpc_enetif_init)
 <LI><a href="#[4b]">msDelay</a> from webserver_freertos.o(i.msDelay) referenced from lpc17xx_40xx_emac.o(i.low_level_init)
 <LI><a href="#[69]">netif_set_link_down</a> from netif.o(i.netif_set_link_down) referenced from webserver_freertos.o(i.vSetupIFTask)
 <LI><a href="#[68]">netif_set_link_up</a> from netif.o(i.netif_set_link_up) referenced from webserver_freertos.o(i.vSetupIFTask)
 <LI><a href="#[5b]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[43]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[43]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[6a]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[5e]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[5c]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[5f]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[5d]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[42]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[42]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[61]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog)
 <LI><a href="#[60]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[64]">tcpclient_thread</a> from tcpserver.o(i.tcpclient_thread) referenced from tcpserver.o(i.tcpserver_init)
 <LI><a href="#[65]">tcpip_init_done_signal</a> from webserver_freertos.o(i.tcpip_init_done_signal) referenced from webserver_freertos.o(i.vSetupIFTask)
 <LI><a href="#[66]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from webserver_freertos.o(i.vSetupIFTask)
 <LI><a href="#[62]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcp_timer_needed)
 <LI><a href="#[62]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcpip_tcp_timer)
 <LI><a href="#[63]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[51]">vAppFuncTask</a> from webserver_freertos.o(i.vAppFuncTask) referenced from webserver_freertos.o(i.main)
 <LI><a href="#[4e]">vPacketReceiveTask</a> from lpc17xx_40xx_emac.o(i.vPacketReceiveTask) referenced from lpc17xx_40xx_emac.o(i.lpc_enetif_init)
 <LI><a href="#[52]">vPowerFuncTask</a> from webserver_freertos.o(i.vPowerFuncTask) referenced from webserver_freertos.o(i.main)
 <LI><a href="#[50]">vSetupIFTask</a> from webserver_freertos.o(i.vSetupIFTask) referenced from webserver_freertos.o(i.main)
 <LI><a href="#[4f]">vTransmitCleanupTask</a> from lpc17xx_40xx_emac.o(i.vTransmitCleanupTask) referenced from lpc17xx_40xx_emac.o(i.lpc_enetif_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[206]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[207]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[208]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[209]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[20a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[71]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[20b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[20c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[73]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[20d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[75]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[20f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[210]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[211]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[77]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[212]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[213]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[214]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[215]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[216]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[217]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[218]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[219]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[220]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[80]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[221]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[222]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[223]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[224]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[225]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[226]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[227]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[6d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[228]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[78]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[229]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[22a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a6]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[22b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[81]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[1fe]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>ulPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f4]"></a>vPortClearInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[22c]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[22d]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UnHandled_Vector</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnHandled_Vector
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnHandled_Vector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, keil_startup_lpc17xx_40xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[84]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[87]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[88]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethdata_decode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_thread
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[9a]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[70]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[8d]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[8f]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[142]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[137]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
</UL>

<P><STRONG><a name="[133]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[13b]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
</UL>

<P><STRONG><a name="[138]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
</UL>

<P><STRONG><a name="[13a]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
</UL>

<P><STRONG><a name="[143]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[13c]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethdata_decode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethdata_broadcast
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSave
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLoad
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_chksum_copy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_output
</UL>

<P><STRONG><a name="[91]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[22e]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[22f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterSend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterRead
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[232]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[139]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[234]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[235]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[96]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[74]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[98]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[99]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9b]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[72]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[89]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[90]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[8e]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[3a]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[237]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[94]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[238]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[239]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[3e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[9e]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[97]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[23a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a1]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[7e]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a3]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a2]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[76]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[a7]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[a8]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[a9]"></a>Board_Debug_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, board.o(i.Board_Debug_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Board_Debug_Init &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetPeripheralClockRate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetMainPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXEnable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[176]"></a>Board_ENET_GetMacADDR</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, board.o(i.Board_ENET_GetMacADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Board_ENET_GetMacADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_init
</UL>

<P><STRONG><a name="[ad]"></a>Board_GPIOInput_DIROut</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.Board_GPIOInput_DIROut))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserystemInit
</UL>

<P><STRONG><a name="[af]"></a>Board_GPIOInput_State</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.Board_GPIOInput_State))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_ReadPortBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemRunChk
</UL>

<P><STRONG><a name="[b1]"></a>Board_GPIOOutput_DIROut</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.Board_GPIOOutput_DIROut))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIROutput
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserystemInit
</UL>

<P><STRONG><a name="[b3]"></a>Board_GPIOOutput_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board.o(i.Board_GPIOOutput_Set))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_WritePortBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemRunChk
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_Toggle
</UL>

<P><STRONG><a name="[b5]"></a>Board_GPIOOutput_State</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.Board_GPIOOutput_State))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_ReadPortBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_Toggle
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>Board_GPIOOutput_Toggle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(i.Board_GPIOOutput_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_GPIOOutput_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_Set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_State
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerFuncTask
</UL>

<P><STRONG><a name="[b7]"></a>Board_I2C_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, board.o(i.Board_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Board_I2C_Init &rArr; Chip_IOCON_PinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[b9]"></a>Board_Init</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Board_Init &rArr; Board_SPI_Init &rArr; Board_SSP1_Init &rArr; Chip_IOCON_PinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_Set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Reset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetClockRate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetPCLKDiv
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_mode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_WriteDirBit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SPI_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>Board_SPI_DeassertSSEL</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(i.Board_SPI_DeassertSSEL))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_WritePortBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SPI_Init
</UL>

<P><STRONG><a name="[bc]"></a>Board_SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, board.o(i.Board_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Board_SPI_Init &rArr; Board_SSP1_Init &rArr; Chip_IOCON_PinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMux
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_WriteDirBit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP1_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SPI_DeassertSSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[c6]"></a>Board_SSP1_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, board.o(i.Board_SSP1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Board_SSP1_Init &rArr; Chip_IOCON_PinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SPI_Init
</UL>

<P><STRONG><a name="[c7]"></a>Board_SetupClocking</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board_sysinit.o(i.Board_SetupClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Board_SetupClocking &rArr; Chip_SetupXtalClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>

<P><STRONG><a name="[c9]"></a>Board_SetupMuxing</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_sysinit.o(i.Board_SetupMuxing))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Board_SetupMuxing &rArr; Chip_IOCON_SetPinMuxing &rArr; Chip_IOCON_PinMuxSet &rArr; Chip_IOCON_PinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_SetPinMuxing
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>

<P><STRONG><a name="[cb]"></a>Board_SystemInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board_sysinit.o(i.Board_SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Board_SystemInit &rArr; Board_SetupMuxing &rArr; Chip_IOCON_SetPinMuxing &rArr; Chip_IOCON_PinMuxSet &rArr; Chip_IOCON_PinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupMuxing
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupClocking
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cd]"></a>Board_UARTPutChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(i.Board_UARTPutChar))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cc]"></a>Board_UARTPutSTR</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, board.o(i.Board_UARTPutSTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Board_UARTPutSTR
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>

<P><STRONG><a name="[ce]"></a>Chip_Clock_DisablePLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_17xx_40xx.o(i.Chip_Clock_DisablePLL))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_FeedPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[d0]"></a>Chip_Clock_EnablePLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_17xx_40xx.o(i.Chip_Clock_EnablePLL))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_FeedPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[ba]"></a>Chip_Clock_EnablePeriphClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_17xx_40xx.o(i.Chip_Clock_EnablePeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Init
</UL>

<P><STRONG><a name="[d7]"></a>Chip_Clock_GetCPUClockDiv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock_17xx_40xx.o(i.Chip_Clock_GetCPUClockDiv))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
</UL>

<P><STRONG><a name="[d2]"></a>Chip_Clock_GetCPUClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_17xx_40xx.o(i.Chip_Clock_GetCPUClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[d1]"></a>Chip_Clock_GetMainClockRate</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, clock_17xx_40xx.o(i.Chip_Clock_GetMainClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetMainPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSYSCLKRate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainPLLOutClockRate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetCPUClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
</UL>

<P><STRONG><a name="[d3]"></a>Chip_Clock_GetMainPLLOutClockRate</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, clock_17xx_40xx.o(i.Chip_Clock_GetMainPLLOutClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Chip_Clock_GetMainPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSYSCLKRate
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[d6]"></a>Chip_Clock_GetPCLKDiv</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, clock_17xx_40xx.o(i.Chip_Clock_GetPCLKDiv))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetPeripheralClockRate
</UL>

<P><STRONG><a name="[d5]"></a>Chip_Clock_GetPeripheralClockRate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clock_17xx_40xx.o(i.Chip_Clock_GetPeripheralClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Chip_Clock_GetPeripheralClockRate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetMainPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getClkRate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[d4]"></a>Chip_Clock_GetSYSCLKRate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, clock_17xx_40xx.o(i.Chip_Clock_GetSYSCLKRate))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainPLLOutClockRate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[c2]"></a>Chip_Clock_GetSystemClockRate</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, clock_17xx_40xx.o(i.Chip_Clock_GetSystemClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetMainPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetCPUClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetPeripheralClockRate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_FindMIIDiv
</UL>

<P><STRONG><a name="[e7]"></a>Chip_Clock_SetCPUClockDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock_17xx_40xx.o(i.Chip_Clock_SetCPUClockDiv))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[c1]"></a>Chip_Clock_SetPCLKDiv</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clock_17xx_40xx.o(i.Chip_Clock_SetPCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[d8]"></a>Chip_Clock_SetupPLL</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clock_17xx_40xx.o(i.Chip_Clock_SetupPLL))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_FeedPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[d9]"></a>Chip_ENET_FindMIIDiv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, enet_17xx_40xx.o(i.Chip_ENET_FindMIIDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Chip_ENET_FindMIIDiv &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetMainPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[188]"></a>Chip_ENET_GetFillDescNum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_GetFillDescNum))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_tx_ready
</UL>

<P><STRONG><a name="[17e]"></a>Chip_ENET_IncRXConsumeIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_IncRXConsumeIndex))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_input
</UL>

<P><STRONG><a name="[183]"></a>Chip_ENET_IncTXProduceIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_IncTXProduceIndex))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_output
</UL>

<P><STRONG><a name="[da]"></a>Chip_ENET_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, enet_17xx_40xx.o(i.Chip_ENET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_ENET_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[187]"></a>Chip_ENET_InitRxDescriptors</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_InitRxDescriptors))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rx_setup
</UL>

<P><STRONG><a name="[18b]"></a>Chip_ENET_InitTxDescriptors</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_InitTxDescriptors))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_tx_setup
</UL>

<P><STRONG><a name="[174]"></a>Chip_ENET_ReadMIIData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_ReadMIIData))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcPHYStsPoll
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_phy_init
</UL>

<P><STRONG><a name="[1f6]"></a>Chip_ENET_SetFullDuplex</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_SetFullDuplex))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>

<P><STRONG><a name="[1f7]"></a>Chip_ENET_SetHalfDuplex</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_SetHalfDuplex))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>

<P><STRONG><a name="[16e]"></a>Chip_ENET_SetupMII</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_SetupMII))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[173]"></a>Chip_ENET_StartMIIRead</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_StartMIIRead))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcPHYStsPoll
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_phy_init
</UL>

<P><STRONG><a name="[186]"></a>Chip_ENET_StartMIIWrite</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, enet_17xx_40xx.o(i.Chip_ENET_StartMIIWrite))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_mii_write
</UL>

<P><STRONG><a name="[9]"></a>Chip_I2C_EventHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c_17xx_40xx.o(i.Chip_I2C_EventHandler))
<BR>[Address Reference Count : 2]<UL><LI> i2c_17xx_40xx.o(.data)
<LI> board.o(i.i2c_set_mode)
</UL>
<P><STRONG><a name="[48]"></a>Chip_I2C_EventHandlerPolling</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, i2c_17xx_40xx.o(i.Chip_I2C_EventHandlerPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Chip_I2C_EventHandlerPolling &rArr; Chip_I2C_MasterStateHandler &rArr; handleMasterXferState
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterStateHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_IsStateChanged
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.i2c_set_mode)
</UL>
<P><STRONG><a name="[bd]"></a>Chip_I2C_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2c_17xx_40xx.o(i.Chip_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[f1]"></a>Chip_I2C_IsMasterActive</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, i2c_17xx_40xx.o(i.Chip_I2C_IsMasterActive))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>Chip_I2C_IsStateChanged</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c_17xx_40xx.o(i.Chip_I2C_IsStateChanged))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_EventHandlerPolling
</UL>

<P><STRONG><a name="[dd]"></a>Chip_I2C_MasterRead</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, i2c_17xx_40xx.o(i.Chip_I2C_MasterRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_I2C_MasterRead &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterTransfer
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLoad
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppFuncTask
</UL>

<P><STRONG><a name="[e0]"></a>Chip_I2C_MasterSend</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, i2c_17xx_40xx.o(i.Chip_I2C_MasterSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_I2C_MasterSend &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterTransfer
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSave
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLoad
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppFuncTask
</UL>

<P><STRONG><a name="[dc]"></a>Chip_I2C_MasterStateHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, i2c_17xx_40xx.o(i.Chip_I2C_MasterStateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Chip_I2C_MasterStateHandler &rArr; handleMasterXferState
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMasterXferState
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_EventHandlerPolling
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>Chip_I2C_MasterTransfer</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, i2c_17xx_40xx.o(i.Chip_I2C_MasterTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_I2C_MasterTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterSend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterRead
</UL>

<P><STRONG><a name="[be]"></a>Chip_I2C_SetClockRate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c_17xx_40xx.o(i.Chip_I2C_SetClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Chip_I2C_SetClockRate &rArr; getClkRate &rArr; Chip_Clock_GetPeripheralClockRate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetMainPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getClkRate
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[14f]"></a>Chip_I2C_SetMasterEventHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c_17xx_40xx.o(i.Chip_I2C_SetMasterEventHandler))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_mode
</UL>

<P><STRONG><a name="[e3]"></a>Chip_I2C_SlaveStateHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, i2c_17xx_40xx.o(i.Chip_I2C_SlaveStateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_I2C_SlaveStateHandler &rArr; getSlaveIndex &rArr; lookupSlaveIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSlaveXferState
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSlaveIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>Chip_IOCON_PinMux</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iocon_17xx_40xx.o(i.Chip_IOCON_PinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_IOCON_PinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMuxSet
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SSP1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SPI_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_I2C_Init
</UL>

<P><STRONG><a name="[e6]"></a>Chip_IOCON_PinMuxSet</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, iocon_17xx_40xx.o(i.Chip_IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Chip_IOCON_PinMuxSet &rArr; Chip_IOCON_PinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_SetPinMuxing
</UL>

<P><STRONG><a name="[ca]"></a>Chip_IOCON_SetPinMuxing</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, iocon_17xx_40xx.o(i.Chip_IOCON_SetPinMuxing))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Chip_IOCON_SetPinMuxing &rArr; Chip_IOCON_PinMuxSet &rArr; Chip_IOCON_PinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupMuxing
</UL>

<P><STRONG><a name="[c8]"></a>Chip_SetupXtalClocking</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, sysinit_17xx_40xx.o(i.Chip_SetupXtalClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_SetupXtalClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupPLL
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetCPUClockDiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePLL
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_DisablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupClocking
</UL>

<P><STRONG><a name="[c0]"></a>Chip_TIMER_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer_17xx_40xx.o(i.Chip_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_TIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Timer_GetClockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[c3]"></a>Chip_TIMER_Reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer_17xx_40xx.o(i.Chip_TIMER_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerFuncTask
</UL>

<P><STRONG><a name="[aa]"></a>Chip_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart_17xx_40xx.o(i.Chip_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetClockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[ab]"></a>Chip_UART_SetBaud</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart_17xx_40xx.o(i.Chip_UART_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Chip_UART_SetBaud &rArr; Chip_Clock_GetPeripheralClockRate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetMainPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetPeripheralClockRate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetClkIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[ac]"></a>Chip_UART_TXEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_17xx_40xx.o(i.Chip_UART_TXEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[eb]"></a>DataLoad</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, webserver_freertos.o(i.DataLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DataLoad &rArr; Chip_I2C_MasterSend &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterSend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterRead
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppFuncTask
</UL>

<P><STRONG><a name="[ed]"></a>DataSave</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, webserver_freertos.o(i.DataSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DataSave &rArr; Chip_I2C_MasterSend &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterSend
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppFuncTask
</UL>

<P><STRONG><a name="[31]"></a>ETH_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lpc17xx_40xx_emac.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ETH_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>GetHTTP_Header</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip_fs.o(i.GetHTTP_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetHTTP_Header &rArr; get_http_headers &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[1f]"></a>I2C0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, board.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C0_IRQHandler &rArr; Chip_I2C_SlaveStateHandler &rArr; getSlaveIndex &rArr; lookupSlaveIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SlaveStateHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterStateHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_IsMasterActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chip_17xx_40xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetMainPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>SystemInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysinit.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; Board_SystemInit &rArr; Board_SetupMuxing &rArr; Chip_IOCON_SetPinMuxing &rArr; Chip_IOCON_PinMuxSet &rArr; Chip_IOCON_PinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>SystemRunChk</STRONG> (Thumb, 598 bytes, Stack size 16 bytes, smartterminal.o(i.SystemRunChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemRunChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_Set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOInput_State
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppFuncTask
</UL>

<P><STRONG><a name="[16]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, board.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = TIMER0_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc17xx_40xx.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>UserystemInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, smartterminal.o(i.UserystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_DIROut
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOInput_DIROut
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppFuncTask
</UL>

<P><STRONG><a name="[82]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[105]"></a>assert_loop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpc_debug.o(i.assert_loop))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_thread
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rx_queue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_output
</UL>

<P><STRONG><a name="[130]"></a>crc_16</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, board.o(i.crc_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc_16
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethdata_decode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethdata_broadcast
</UL>

<P><STRONG><a name="[53]"></a>do_bind</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, api_msg.o(i.do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_bind &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[54]"></a>do_close</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, api_msg.o(i.do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = do_close &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_close_shutdown)
</UL>
<P><STRONG><a name="[55]"></a>do_connect</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, api_msg.o(i.do_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_connect)
</UL>
<P><STRONG><a name="[56]"></a>do_delconn</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, api_msg.o(i.do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = do_delconn &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[57]"></a>do_listen</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, api_msg.o(i.do_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = do_listen &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_listen_with_backlog)
</UL>
<P><STRONG><a name="[58]"></a>do_newconn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_msg.o(i.do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[59]"></a>do_recv</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, api_msg.o(i.do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_recv_data)
</UL>
<P><STRONG><a name="[5a]"></a>do_write</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, api_msg.o(i.do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_partly)
</UL>
<P><STRONG><a name="[124]"></a>etharp_output</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_etharp_output
</UL>

<P><STRONG><a name="[129]"></a>etharp_query</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[12a]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[103]"></a>etharp_tmr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[132]"></a>ethernet_input</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[9d]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[3c]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, board.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>fs_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwip_fs.o(i.fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_close &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[144]"></a>fs_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip_fs.o(i.fs_open))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[146]"></a>fs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip_fs.o(i.fs_read))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[e4]"></a>getSlaveIndex</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, i2c_17xx_40xx.o(i.getSlaveIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSlaveIndex &rArr; lookupSlaveIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSlaveIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SlaveStateHandler
</UL>

<P><STRONG><a name="[e1]"></a>handleMasterXferState</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, i2c_17xx_40xx.o(i.handleMasterXferState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = handleMasterXferState
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterStateHandler
</UL>

<P><STRONG><a name="[e5]"></a>handleSlaveXferState</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, i2c_17xx_40xx.o(i.handleSlaveXferState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = handleSlaveXferState
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SlaveStateHandler
</UL>

<P><STRONG><a name="[13d]"></a>http_server_netconn_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, netconn_fs.o(i.http_server_netconn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = http_server_netconn_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>

<P><STRONG><a name="[150]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[152]"></a>icmp_input</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[157]"></a>icmp_time_exceeded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[154]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[153]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[159]"></a>inet_chksum_pseudo</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[15a]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, inet_chksum.o(i.inet_chksum_pseudo_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pseudo_partial &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[126]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[15b]"></a>ip_frag</STRONG> (Thumb, 364 bytes, Stack size 88 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[134]"></a>ip_input</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[156]"></a>ip_output</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[155]"></a>ip_output_if</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[161]"></a>ip_reass</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ip_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[16b]"></a>ip_reass_tmr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
</UL>

<P><STRONG><a name="[165]"></a>ip_route</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[1f8]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 120 bytes, Stack size 36 bytes, ip_addr.o(i.ipaddr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>

<P><STRONG><a name="[172]"></a>lpcPHYStsPoll</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lpc_phy_ip101gr.o(i.lpcPHYStsPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lpcPHYStsPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_StartMIIRead
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_ReadMIIData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc_update_phy_sts
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>

<P><STRONG><a name="[67]"></a>lpc_enetif_init</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, lpc17xx_40xx_emac.o(i.lpc_enetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lpc_enetif_init &rArr; low_level_init &rArr; lpc_rx_setup &rArr; lpc_rx_queue &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_ENET_GetMacADDR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver_freertos.o(i.vSetupIFTask)
</UL>
<P><STRONG><a name="[17a]"></a>lpc_enetif_input</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_40xx_emac.o(i.lpc_enetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lpc_enetif_input &rArr; lpc_low_level_input &rArr; lpc_rx_setup &rArr; lpc_rx_queue &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPacketReceiveTask
</UL>

<P><STRONG><a name="[16f]"></a>lpc_phy_init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lpc_phy_ip101gr.o(i.lpc_phy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lpc_phy_init &rArr; lpc_mii_write
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_StartMIIRead
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_ReadMIIData
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_mii_write
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[17d]"></a>lpc_rx_queue</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lpc17xx_40xx_emac.o(i.lpc_rx_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lpc_rx_queue &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rxqueue_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rx_setup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_input
</UL>

<P><STRONG><a name="[181]"></a>lpc_tx_ready</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc17xx_40xx_emac.o(i.lpc_tx_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lpc_tx_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_GetFillDescNum
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_output
</UL>

<P><STRONG><a name="[189]"></a>lpc_tx_reclaim</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lpc17xx_40xx_emac.o(i.lpc_tx_reclaim))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lpc_tx_reclaim &rArr; sys_mutex_lock &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTransmitCleanupTask
</UL>

<P><STRONG><a name="[18c]"></a>lwip_chksum_copy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, inet_chksum.o(i.lwip_chksum_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_chksum_copy &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[1d7]"></a>lwip_htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>

<P><STRONG><a name="[120]"></a>lwip_htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_input
</UL>

<P><STRONG><a name="[18d]"></a>lwip_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[1da]"></a>lwip_ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[15c]"></a>lwip_ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
</UL>

<P><STRONG><a name="[7d]"></a>main</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, webserver_freertos.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterSend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterRead
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4b]"></a>msDelay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, webserver_freertos.o(i.msDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = msDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc17xx_40xx_emac.o(i.low_level_init)
</UL>
<P><STRONG><a name="[141]"></a>netbuf_data</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netbuf_data
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[148]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[195]"></a>netbuf_next</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netbuf_next
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
</UL>

<P><STRONG><a name="[14d]"></a>netconn_accept</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, api_lib.o(i.netconn_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_thread
</UL>

<P><STRONG><a name="[f9]"></a>netconn_alloc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = netconn_alloc &rArr; sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[14b]"></a>netconn_bind</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_thread
</UL>

<P><STRONG><a name="[147]"></a>netconn_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_lib.o(i.netconn_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_close &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_thread
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[19a]"></a>netconn_connect</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, api_lib.o(i.netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_connect &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
</UL>

<P><STRONG><a name="[14e]"></a>netconn_delete</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_delete &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_thread
</UL>

<P><STRONG><a name="[102]"></a>netconn_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[14c]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, api_lib.o(i.netconn_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_thread
</UL>

<P><STRONG><a name="[14a]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_thread
</UL>

<P><STRONG><a name="[140]"></a>netconn_recv</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[145]"></a>netconn_write_partly</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netconn_write_partly &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
</UL>

<P><STRONG><a name="[19e]"></a>netif_add</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>

<P><STRONG><a name="[18f]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[19f]"></a>netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[1f5]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>

<P><STRONG><a name="[1a2]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[1a0]"></a>netif_set_ipaddr</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[69]"></a>netif_set_link_down</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_down))
<BR>[Address Reference Count : 1]<UL><LI> webserver_freertos.o(i.vSetupIFTask)
</UL>
<P><STRONG><a name="[68]"></a>netif_set_link_up</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netif_set_link_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver_freertos.o(i.vSetupIFTask)
</UL>
<P><STRONG><a name="[1a1]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[1a3]"></a>netif_set_up</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>

<P><STRONG><a name="[12b]"></a>pbuf_alloc</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rx_queue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_output
</UL>

<P><STRONG><a name="[15d]"></a>pbuf_alloced_custom</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[15e]"></a>pbuf_cat</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[166]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rx_queue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_output
</UL>

<P><STRONG><a name="[12c]"></a>pbuf_copy</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[1a5]"></a>pbuf_copy_partial</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[121]"></a>pbuf_free</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_tx_reclaim
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_input
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTransmitCleanupTask
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_input
</UL>

<P><STRONG><a name="[125]"></a>pbuf_header</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_header
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[160]"></a>pbuf_realloc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[12d]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_ref &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_output
</UL>

<P><STRONG><a name="[1be]"></a>pvPortMalloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, heap_3.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[205]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[106]"></a>raw_bind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(i.raw_bind))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[10f]"></a>raw_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(i.raw_connect))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[162]"></a>raw_input</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = raw_input
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1a8]"></a>raw_new</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = raw_new &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[1a9]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[114]"></a>raw_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = raw_remove &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[196]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sys_arch_freertos.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[19b]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_arch_freertos.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[112]"></a>sys_arch_protect</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_arch_freertos.o(i.sys_arch_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
</UL>

<P><STRONG><a name="[1c1]"></a>sys_arch_sem_wait</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sys_arch_freertos.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTransmitCleanupTask
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPacketReceiveTask
</UL>

<P><STRONG><a name="[113]"></a>sys_arch_unprotect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch_freertos.o(i.sys_arch_unprotect))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
</UL>

<P><STRONG><a name="[18e]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch_freertos.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[101]"></a>sys_mbox_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_arch_freertos.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_mbox_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[117]"></a>sys_mbox_new</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sys_arch_freertos.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_mbox_new &rArr; xQueueGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[1c5]"></a>sys_mbox_post</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sys_arch_freertos.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[fb]"></a>sys_mbox_trypost</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sys_arch_freertos.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[182]"></a>sys_mutex_lock</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch_freertos.o(i.sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_mutex_lock &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_tx_reclaim
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTransmitCleanupTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_output
</UL>

<P><STRONG><a name="[178]"></a>sys_mutex_new</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_arch_freertos.o(i.sys_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_mutex_new &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_init
</UL>

<P><STRONG><a name="[184]"></a>sys_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_arch_freertos.o(i.sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_tx_reclaim
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTransmitCleanupTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_output
</UL>

<P><STRONG><a name="[11b]"></a>sys_now</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch_freertos.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_now &rArr; xTaskGetTickCount &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[197]"></a>sys_sem_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch_freertos.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sys_sem_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[179]"></a>sys_sem_new</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sys_arch_freertos.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[109]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_arch_freertos.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[13e]"></a>sys_thread_new</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, sys_arch_freertos.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sys_thread_new &rArr; xTaskGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_init
</UL>

<P><STRONG><a name="[104]"></a>sys_timeout</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, timers.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_timeout &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[192]"></a>sys_timeouts_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timers.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1c7]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, timers.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[1c8]"></a>sys_untimeout</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timers.o(i.sys_untimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_untimeout &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[1c9]"></a>tcp_abandon</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[19c]"></a>tcp_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[10c]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[1cc]"></a>tcp_alloc</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[fc]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[108]"></a>tcp_bind</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[10d]"></a>tcp_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_close))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[111]"></a>tcp_connect</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[1d3]"></a>tcp_eff_send_mss</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[1d4]"></a>tcp_enqueue_flags</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[100]"></a>tcp_err</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_err
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[1d8]"></a>tcp_fasttmr</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[191]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[164]"></a>tcp_input</STRONG> (Thumb, 866 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1de]"></a>tcp_keepalive</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[116]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[1ac]"></a>tcp_new</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[1cd]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[11d]"></a>tcp_output</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[1d1]"></a>tcp_pcb_purge</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[1ca]"></a>tcp_pcb_remove</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[ff]"></a>tcp_poll</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[1d9]"></a>tcp_process_refused_data</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fd]"></a>tcp_recv</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[60]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[119]"></a>tcp_recved</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[1e6]"></a>tcp_rexmit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</UL>

<P><STRONG><a name="[1e7]"></a>tcp_rexmit_fast</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[1ea]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[1cb]"></a>tcp_rst</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[1e9]"></a>tcp_seg_copy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcp_seg_copy &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[1d6]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>

<P><STRONG><a name="[1a6]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[1e2]"></a>tcp_send_empty_ack</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[1d2]"></a>tcp_send_fin</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[fe]"></a>tcp_sent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[10e]"></a>tcp_shutdown</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[1eb]"></a>tcp_slowtmr</STRONG> (Thumb, 694 bytes, Stack size 40 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[1cf]"></a>tcp_timer_needed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[1ed]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[1e8]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[11c]"></a>tcp_write</STRONG> (Thumb, 1018 bytes, Stack size 136 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_chksum_copy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_add_chksum
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[1ec]"></a>tcp_zero_window_probe</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[198]"></a>tcpip_apimsg</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, tcpip.o(i.tcpip_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[1a7]"></a>tcpip_callback_with_block</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[1f0]"></a>tcpip_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>

<P><STRONG><a name="[66]"></a>tcpip_input</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcpip_input &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver_freertos.o(i.vSetupIFTask)
</UL>
<P><STRONG><a name="[1f1]"></a>tcpserver_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcpserver.o(i.tcpserver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tcpserver_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
</UL>

<P><STRONG><a name="[107]"></a>udp_bind</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[110]"></a>udp_connect</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[190]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[163]"></a>udp_input</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1aa]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_new &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[1ab]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[115]"></a>udp_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_remove &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[1b3]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1c2]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[1ba]"></a>vApplicationIdleHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1bf]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vApplicationMallocFailedHook &rArr; Board_UARTPutSTR
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1f2]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vApplicationStackOverflowHook &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[1ff]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[204]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[1ae]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1fa]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1b2]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>

<P><STRONG><a name="[1b4]"></a>vPortExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>

<P><STRONG><a name="[1b5]"></a>vPortFree</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, heap_3.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[1fd]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1b9]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1c3]"></a>vQueueDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[1f4]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[149]"></a>vTaskDelay</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_thread
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerFuncTask
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppFuncTask
</UL>

<P><STRONG><a name="[1bd]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1f9]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1b8]"></a>vTaskPriorityDisinherit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tasks.o(i.vTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1fb]"></a>vTaskPriorityInherit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[202]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[194]"></a>vTaskStartScheduler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[83]"></a>vTaskSwitchContext</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1fc]"></a>xPortStartScheduler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[177]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_init
</UL>

<P><STRONG><a name="[1c6]"></a>xQueueCreateMutex</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</UL>

<P><STRONG><a name="[1c4]"></a>xQueueGenericCreate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[180]"></a>xQueueGenericReceive</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_output
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>

<P><STRONG><a name="[200]"></a>xQueueGenericReset</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[18a]"></a>xQueueGenericSend</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_tx_reclaim
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</UL>

<P><STRONG><a name="[ee]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[193]"></a>xTaskGenericCreate</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = xTaskGenericCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[201]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1c0]"></a>xTaskGetTickCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCount &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>

<P><STRONG><a name="[f3]"></a>xTaskIncrementTick</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1bc]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1b1]"></a>xTaskResumeAll</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[40]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1f3]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, webserver_freertos.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetupIFTask
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerFuncTask
</UL>

<P><STRONG><a name="[65]"></a>tcpip_init_done_signal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, webserver_freertos.o(i.tcpip_init_done_signal))
<BR>[Address Reference Count : 1]<UL><LI> webserver_freertos.o(i.vSetupIFTask)
</UL>
<P><STRONG><a name="[51]"></a>vAppFuncTask</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, webserver_freertos.o(i.vAppFuncTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vAppFuncTask &rArr; DataSave &rArr; Chip_I2C_MasterSend &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserystemInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemRunChk
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterSend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterRead
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSave
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLoad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver_freertos.o(i.main)
</UL>
<P><STRONG><a name="[52]"></a>vPowerFuncTask</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, webserver_freertos.o(i.vPowerFuncTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPowerFuncTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_Toggle
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver_freertos.o(i.main)
</UL>
<P><STRONG><a name="[50]"></a>vSetupIFTask</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, webserver_freertos.o(i.vSetupIFTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = vSetupIFTask &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcPHYStsPoll
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_SetHalfDuplex
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_SetFullDuplex
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webserver_freertos.o(i.main)
</UL>
<P><STRONG><a name="[f0]"></a>get_http_headers</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, lwip_fs.o(i.get_http_headers))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_http_headers &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHTTP_Header
</UL>

<P><STRONG><a name="[13f]"></a>http_server_netconn_serve</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, netconn_fs.o(i.http_server_netconn_serve))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = http_server_netconn_serve &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHTTP_Header
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_thread
</UL>

<P><STRONG><a name="[47]"></a>http_server_netconn_thread</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, netconn_fs.o(i.http_server_netconn_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = http_server_netconn_thread &rArr; http_server_netconn_serve &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_netconn_serve
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconn_fs.o(i.http_server_netconn_init)
</UL>
<P><STRONG><a name="[12f]"></a>ethdata_broadcast</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tcpserver.o(i.ethdata_broadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ethdata_broadcast &rArr; crc_16
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_16
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
</UL>

<P><STRONG><a name="[131]"></a>ethdata_decode</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, tcpserver.o(i.ethdata_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ethdata_decode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_16
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_thread
</UL>

<P><STRONG><a name="[64]"></a>tcpclient_thread</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, tcpserver.o(i.tcpclient_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tcpclient_thread &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethdata_decode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethdata_broadcast
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpserver.o(i.tcpserver_init)
</UL>
<P><STRONG><a name="[5e]"></a>prvTaskExitError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1b6]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1b7]"></a>prvCopyDataToQueue</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1bb]"></a>prvUnlockQueue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1ad]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1af]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[6a]"></a>prvIdleTask</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[41]"></a>arp_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.arp_timer)
<LI> timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[4a]"></a>ip_reass_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.ip_reass_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ip_reass_timer &rArr; ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.ip_reass_timer)
<LI> timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[62]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timers.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.tcp_timer_needed)
<LI> timers.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[1d5]"></a>tcp_create_segment</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[1df]"></a>tcp_output_alloc_header</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[1e3]"></a>tcp_output_segment</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[1e4]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[1ef]"></a>tcp_seg_add_chksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_seg_add_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_seg_add_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[1ee]"></a>tcp_write_checks</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_write_checks
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[1dc]"></a>tcp_listen_input</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[1e1]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[1e0]"></a>tcp_parseopt</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[1dd]"></a>tcp_process</STRONG> (Thumb, 820 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[1e5]"></a>tcp_receive</STRONG> (Thumb, 1990 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[1db]"></a>tcp_timewait_input</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[61]"></a>tcp_accept_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[1d0]"></a>tcp_close_shutdown</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
</UL>

<P><STRONG><a name="[1ce]"></a>tcp_new_port</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[5b]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_free_ooseq_callback &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[1a4]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[15f]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
</UL>

<P><STRONG><a name="[168]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[169]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ip_reass_dequeue_datagram &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[16a]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[167]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[49]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[158]"></a>lwip_standard_chksum</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_chksum_copy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>

<P><STRONG><a name="[151]"></a>icmp_send_response</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
</UL>

<P><STRONG><a name="[11e]"></a>etharp_arp_input</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = etharp_arp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[122]"></a>etharp_find_entry</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[123]"></a>etharp_free_entry</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[128]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[12e]"></a>etharp_raw</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[127]"></a>etharp_send_ip</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[11f]"></a>etharp_update_arp_entry</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[63]"></a>tcpip_thread</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[46]"></a>accept_function</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, api_msg.o(i.accept_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.do_listen)
</UL>
<P><STRONG><a name="[10b]"></a>do_close_internal</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, api_msg.o(i.do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
</UL>

<P><STRONG><a name="[45]"></a>do_connected</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, api_msg.o(i.do_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = do_connected &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.do_connect)
</UL>
<P><STRONG><a name="[11a]"></a>do_writemore</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, api_msg.o(i.do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
</UL>

<P><STRONG><a name="[44]"></a>err_tcp</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[10a]"></a>netconn_drain</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[118]"></a>pcb_new</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[43]"></a>poll_tcp</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = poll_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[5c]"></a>recv_raw</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[5f]"></a>recv_tcp</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[5d]"></a>recv_udp</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = recv_udp &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[42]"></a>sent_tcp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = sent_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[fa]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setup_tcp &rArr; tcp_sent
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[199]"></a>netconn_close_shutdown</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, api_lib.o(i.netconn_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
</UL>

<P><STRONG><a name="[19d]"></a>netconn_recv_data</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[17c]"></a>Chip_ENET_IsRxEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc17xx_40xx_emac.o(i.Chip_ENET_IsRxEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPacketReceiveTask
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_input
</UL>

<P><STRONG><a name="[16d]"></a>low_level_init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lpc17xx_40xx_emac.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = low_level_init &rArr; lpc_rx_setup &rArr; lpc_rx_queue &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_phy_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_SetupMII
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_FindMIIDiv
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_tx_setup
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rx_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_init
</UL>

<P><STRONG><a name="[4c]"></a>lpc_etharp_output</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_40xx_emac.o(i.lpc_etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lpc_etharp_output &rArr; etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc17xx_40xx_emac.o(i.lpc_enetif_init)
</UL>
<P><STRONG><a name="[17b]"></a>lpc_low_level_input</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lpc17xx_40xx_emac.o(i.lpc_low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lpc_low_level_input &rArr; lpc_rx_setup &rArr; lpc_rx_queue &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_IncRXConsumeIndex
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rx_queue
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rxqueue_pbuf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rx_setup
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_IsRxEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_input
</UL>

<P><STRONG><a name="[4d]"></a>lpc_low_level_output</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, lpc17xx_40xx_emac.o(i.lpc_low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lpc_low_level_output &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_loop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_IncTXProduceIndex
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_tx_ready
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc17xx_40xx_emac.o(i.lpc_enetif_init)
</UL>
<P><STRONG><a name="[171]"></a>lpc_rx_setup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lpc17xx_40xx_emac.o(i.lpc_rx_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lpc_rx_setup &rArr; lpc_rx_queue &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_InitRxDescriptors
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rx_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_input
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[17f]"></a>lpc_rxqueue_pbuf</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lpc17xx_40xx_emac.o(i.lpc_rxqueue_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lpc_rxqueue_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_rx_queue
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_low_level_input
</UL>

<P><STRONG><a name="[170]"></a>lpc_tx_setup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lpc17xx_40xx_emac.o(i.lpc_tx_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lpc_tx_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_InitTxDescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTransmitCleanupTask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[4e]"></a>vPacketReceiveTask</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc17xx_40xx_emac.o(i.vPacketReceiveTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = vPacketReceiveTask &rArr; lpc_enetif_input &rArr; lpc_low_level_input &rArr; lpc_rx_setup &rArr; lpc_rx_queue &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_enetif_input
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_IsRxEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc17xx_40xx_emac.o(i.lpc_enetif_init)
</UL>
<P><STRONG><a name="[4f]"></a>vTransmitCleanupTask</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, lpc17xx_40xx_emac.o(i.vTransmitCleanupTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTransmitCleanupTask &rArr; lpc_tx_reclaim &rArr; sys_mutex_lock &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_tx_reclaim
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_tx_setup
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc17xx_40xx_emac.o(i.lpc_enetif_init)
</UL>
<P><STRONG><a name="[cf]"></a>Chip_Clock_FeedPLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_17xx_40xx.o(i.Chip_Clock_FeedPLL))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupPLL
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePLL
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_DisablePLL
</UL>

<P><STRONG><a name="[e2]"></a>getClkRate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_17xx_40xx.o(i.getClkRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getClkRate &rArr; Chip_Clock_GetPeripheralClockRate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetMainPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetPeripheralClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetClockRate
</UL>

<P><STRONG><a name="[16c]"></a>isSlaveAddrMatching</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2c_17xx_40xx.o(i.isSlaveAddrMatching))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSlaveIndex
</UL>

<P><STRONG><a name="[136]"></a>lookupSlaveIndex</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, i2c_17xx_40xx.o(i.lookupSlaveIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lookupSlaveIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSlaveAddrMatching
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSlaveIndex
</UL>

<P><STRONG><a name="[e8]"></a>Chip_Timer_GetClockIndex</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer_17xx_40xx.o(i.Chip_Timer_GetClockIndex))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Init
</UL>

<P><STRONG><a name="[ea]"></a>Chip_UART_GetClkIndex</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_17xx_40xx.o(i.Chip_UART_GetClkIndex))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[e9]"></a>Chip_UART_GetClockIndex</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_17xx_40xx.o(i.Chip_UART_GetClockIndex))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[b0]"></a>Chip_GPIO_ReadPortBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(i.Chip_GPIO_ReadPortBit))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOInput_State
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_State
</UL>

<P><STRONG><a name="[ae]"></a>Chip_GPIO_SetPinDIRInput</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(i.Chip_GPIO_SetPinDIRInput))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOInput_DIROut
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_WriteDirBit
</UL>

<P><STRONG><a name="[b2]"></a>Chip_GPIO_SetPinDIROutput</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(i.Chip_GPIO_SetPinDIROutput))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_DIROut
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_WriteDirBit
</UL>

<P><STRONG><a name="[bb]"></a>Chip_GPIO_WriteDirBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(i.Chip_GPIO_WriteDirBit))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIROutput
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SPI_Init
</UL>

<P><STRONG><a name="[b4]"></a>Chip_GPIO_WritePortBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, board.o(i.Chip_GPIO_WritePortBit))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GPIOOutput_Set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SPI_DeassertSSEL
</UL>

<P><STRONG><a name="[f7]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_mode
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_mode
</UL>

<P><STRONG><a name="[bf]"></a>i2c_set_mode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, board.o(i.i2c_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetMasterEventHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[185]"></a>lpc_mii_write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lpc_phy_ip101gr.o(i.lpc_mii_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lpc_mii_write
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ENET_StartMIIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_phy_init
</UL>

<P><STRONG><a name="[175]"></a>smsc_update_phy_sts</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, lpc_phy_ip101gr.o(i.smsc_update_phy_sts))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcPHYStsPoll
</UL>

<P><STRONG><a name="[3d]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
